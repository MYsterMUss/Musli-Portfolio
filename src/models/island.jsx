/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Eh (https://sketchfab.com/Just_Eh)
License: CC-BY-NC-4.0 (http://creativecommons.org/licenses/by-nc/4.0/)
Source: https://sketchfab.com/3d-models/fantasy-town-0db322fa7a614975b83753a37c4e7350
Title: Fantasy Town
*/
import {a} from'@react-spring/three'
import { useFrame, useThree} from '@react-three/fiber'
import { useRef, useEffect } from 'react'
import { useGLTF } from '@react-three/drei'
import islandScene from "../assets/3d/island.glb"



const Island = ({ isRotating, setIsRotating,setCurrentStage , ...props}) => {
  const islandRef = useRef();
const lastX = useRef(0)
const rotationSpeed = useRef(0)
const dampingFactor = 0.89;
  const {gl, viewport} = useThree();

  const handlePointerDown = (event) => {
    event.stopPropagation();
    event.preventDefault();
    setIsRotating(true);

    // Calculate the clientX based on whether it's a touch event or a mouse event
    const clientX = event.touches ? event.touches[0].clientX : event.clientX;

    // Store the current clientX position for reference
    lastX.current = clientX;
  };

  // Handle pointer (mouse or touch) up event
  const handlePointerUp = (event) => {
    event.stopPropagation();
    event.preventDefault();
    setIsRotating(false);
  };

  // Handle pointer (mouse or touch) move event
  const handlePointerMove = (event) => {
    event.stopPropagation();
    event.preventDefault();
    if (isRotating) {
      // If rotation is enabled, calculate the change in clientX position
      const clientX = event.touches ? event.touches[0].clientX : event.clientX;

      // calculate the change in the horizontal position of the mouse cursor or touch input,
      // relative to the viewport's width
      const delta = (clientX - lastX.current) / viewport.width;

      // Update the island's rotation based on the mouse/touch movement
      islandRef.current.rotation.y += delta * 0.01 * Math.PI;

      // Update the reference for the last clientX position
      lastX.current = clientX;

      // Update the rotation speed
      rotationSpeed.current = delta * 0.01 * Math.PI;
    }
  };

  // Handle keydown events
  const handleKeyDown = (event) => {
    if (event.key === "ArrowLeft") {
      if (!isRotating) setIsRotating(true);

      islandRef.current.rotation.y += 0.005 * Math.PI;
      rotationSpeed.current = 0.007;
    } else if (event.key === "ArrowRight") {
      if (!isRotating) setIsRotating(true);

      islandRef.current.rotation.y -= 0.005 * Math.PI;
      rotationSpeed.current = -0.007;
    }
  };

  // Handle keyup events
  const handleKeyUp = (event) => {
    if (event.key === "ArrowLeft" || event.key === "ArrowRight") {
      setIsRotating(false);
    }
  };

  // Touch events for mobile devices
  const handleTouchStart = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(true);
  
    const clientX = e.touches ? e.touches[0].clientX : e.clientX;
    lastX.current = clientX;
  }
  
  const handleTouchEnd = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(false);
  }
  
  const handleTouchMove = (e) => {
    e.stopPropagation();
    e.preventDefault();
  
    if (isRotating) {
      const clientX = e.touches ? e.touches[0].clientX : e.clientX;
      const delta = (clientX - lastX.current) / viewport.width;
  
      islandRef.current.rotation.y += delta * 0.01 * Math.PI;
      lastX.current = clientX;
      rotationSpeed.current = delta * 0.1 * Math.PI;
    }
  }


  useEffect(() => {
    // Add event listeners for pointer and keyboard events
    const canvas = gl.domElement;
    canvas.addEventListener("pointerdown", handlePointerDown);
    canvas.addEventListener("pointerup", handlePointerUp);
    canvas.addEventListener("pointermove", handlePointerMove);
    window.addEventListener("keydown", handleKeyDown);
    window.addEventListener("keyup", handleKeyUp);
    canvas.addEventListener("touchstart", handleTouchStart);
    canvas.addEventListener("touchend", handleTouchEnd);
    canvas.addEventListener("touchmove", handleTouchMove);

    // Remove event listeners when component unmounts
    return () => {
      canvas.removeEventListener("pointerdown", handlePointerDown);
      canvas.removeEventListener("pointerup", handlePointerUp);
      canvas.removeEventListener("pointermove", handlePointerMove);
      window.removeEventListener("keydown", handleKeyDown);
      window.removeEventListener("keyup", handleKeyUp);
      canvas.removeEventListener("touchstart", handleTouchStart);
      canvas.removeEventListener("touchend", handleTouchEnd);
      canvas.removeEventListener("touchmove", handleTouchMove);
    };
  }, [gl, handlePointerDown, handlePointerUp, handlePointerMove]);

  useFrame(() => {
    // If not rotating, apply damping to slow down the rotation (smoothly)
    if (!isRotating) {
      // Apply damping factor
      rotationSpeed.current *= dampingFactor;

      // Stop rotation when speed is very small
      if (Math.abs(rotationSpeed.current) < 0.001) {
        rotationSpeed.current = 0.001;
      }

      islandRef.current.rotation.y += rotationSpeed.current;
    } else {
      // When rotating, determine the current stage based on island's orientation
      const rotation = islandRef.current.rotation.y;

      /**
       * Normalize the rotation value to ensure it stays within the range [0, 2 * Math.PI].
       * The goal is to ensure that the rotation value remains within a specific range to
       * prevent potential issues with very large or negative rotation values.
       *  Here's a step-by-step explanation of what this code does:
       *  1. rotation % (2 * Math.PI) calculates the remainder of the rotation value when divided
       *     by 2 * Math.PI. This essentially wraps the rotation value around once it reaches a
       *     full circle (360 degrees) so that it stays within the range of 0 to 2 * Math.PI.
       *  2. (rotation % (2 * Math.PI)) + 2 * Math.PI adds 2 * Math.PI to the result from step 1.
       *     This is done to ensure that the value remains positive and within the range of
       *     0 to 2 * Math.PI even if it was negative after the modulo operation in step 1.
       *  3. Finally, ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI) applies another
       *     modulo operation to the value obtained in step 2. This step guarantees that the value
       *     always stays within the range of 0 to 2 * Math.PI, which is equivalent to a full
       *     circle in radians.
       */
      const normalizedRotation =
        ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

      // Set the current stage based on the island's orientation
      switch (true) {
        case normalizedRotation >= 5.5 && normalizedRotation <= 6.0:
          setCurrentStage(4);
          break;
        case normalizedRotation >= 1.0 && normalizedRotation <= 1.5:
          setCurrentStage(1);
          break;
        case normalizedRotation >= 2.5 && normalizedRotation <= 3.0:
          setCurrentStage(2);
          break;
        case normalizedRotation >= 4.5 && normalizedRotation <= 5.0:
          setCurrentStage(3);
          break;
        default:
          setCurrentStage(null);
      }
    }
  });
  
  const { nodes, materials } = useGLTF(islandScene)
  return (
    <a.group {...props} dispose={null} ref={islandRef}  >
      <group rotation={[-Math.PI / 2, 0, 0]} scale={0.080}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          <group position={[-4.062, 4.053, 4.103]}>
            <mesh
              
              
              geometry={nodes.Object_4.geometry}
              material={materials.stairs}
            />
            <mesh
             
              geometry={nodes.Object_5.geometry}
              material={materials.outline}
            />
          </group>
          <group position={[-4.398, -2.011, -5.404]} rotation={[-0.908, -0.507, -0.626]}>
            <mesh
           
              geometry={nodes.Object_7.geometry}
              material={materials.bricks}
            />
            <mesh
           
              geometry={nodes.Object_8.geometry}
              material={materials.outline}
            />
          </group>
          <group position={[2.484, 10.325, 0.105]} rotation={[0, -Math.PI / 2, 0]}>
            <mesh
         
              geometry={nodes.Object_10.geometry}
              material={materials.GLASS}
            />
            <mesh
      
              geometry={nodes.Object_11.geometry}
              material={materials['deco.001']}
            />
          </group>
          <group position={[1.793, 9.727, -2.116]} rotation={[0, Math.PI / 2, 0]}>
            <mesh
              
              
              geometry={nodes.Object_15.geometry}
              material={materials.deco}
            />
            <mesh
              
              
              geometry={nodes.Object_16.geometry}
              material={materials.outline}
            />
          </group>
          <group position={[-3.377, 12.192, 0.249]}>
            <mesh
              
              
              geometry={nodes.Object_18.geometry}
              material={materials.material}
            />
            <mesh
              
              
              geometry={nodes.Object_19.geometry}
              material={materials.floor}
            />
          </group>
          <group position={[3.669, 20.292, -1.62]}>
            <mesh
              
              
              geometry={nodes.Object_21.geometry}
              material={materials.bricks}
            />
            <mesh
              
              
              geometry={nodes.Object_22.geometry}
              material={materials['outline.001']}
            />
            <mesh
              
              
              geometry={nodes.Object_23.geometry}
              material={materials.outline}
            />
          </group>
          <group position={[2.61, 18.244, -1.944]}>
            <mesh
              
              
              geometry={nodes.Object_25.geometry}
              material={materials.Pipe}
            />
            <mesh
              
              
              geometry={nodes.Object_26.geometry}
              material={materials.outline}
            />
          </group>
          <group position={[2.378, 4.207, -6.351]}>
            <mesh
              
              
              geometry={nodes.Object_28.geometry}
              material={materials.fence}
            />
            <mesh
              
              
              geometry={nodes.Object_29.geometry}
              material={materials.outline}
            />
            <mesh
              
              
              geometry={nodes.Object_30.geometry}
              material={materials.emis}
            />
          </group>
          <group position={[-8.03, -0.284, 11.061]}>
            <mesh
              
              
              geometry={nodes.Object_32.geometry}
              material={materials.WALL_1}
            />
            <mesh
              
              
              geometry={nodes.Object_33.geometry}
              material={materials.outline}
            />
          </group>
          <group position={[-2.658, 1.647, 9.363]}>
            <mesh
              
              
              geometry={nodes.Object_35.geometry}
              material={materials.FLOOR_2}
            />
            <mesh
              
              
              geometry={nodes.Object_36.geometry}
              material={materials.outline}
            />
          </group>
          <group position={[5.413, 11.041, 10.967]}>
            <mesh
              
              
              geometry={nodes.Object_38.geometry}
              material={materials.house_1}
            />
            <mesh
              
              
              geometry={nodes.Object_39.geometry}
              material={materials.outline}
            />
          </group>
          <group position={[6.378, 8.406, 0.561]}>
            <mesh
              
              
              geometry={nodes.Object_41.geometry}
              material={materials.house_5}
            />
            <mesh
              
              
              geometry={nodes.Object_42.geometry}
              material={materials.outline}
            />
          </group>
          <group position={[6.441, 14.102, -5.336]}>
            <mesh
              
              
              geometry={nodes.Object_44.geometry}
              material={materials.House_4}
            />
            <mesh
              
              
              geometry={nodes.Object_45.geometry}
              material={materials.outline}
            />
          </group>
          <group position={[-3.545, 6.941, -9.734]}>
            <mesh
              
              
              geometry={nodes.Object_47.geometry}
              material={materials.house_3}
            />
            <mesh
              
              
              geometry={nodes.Object_48.geometry}
              material={materials.outline}
            />
          </group>
          <group position={[-4.838, 4.862, -1.245]}>
            <mesh
              
              
              geometry={nodes.Object_50.geometry}
              material={materials.house_2}
            />
            <mesh
              
              
              geometry={nodes.Object_51.geometry}
              material={materials.outline}
            />
          </group>
          <group position={[-0.323, 5.334, 0.99]}>
            <mesh
              
              
              geometry={nodes.Object_53.geometry}
              material={materials['base.001']}
            />
            <mesh
              
              
              geometry={nodes.Object_54.geometry}
              material={materials.outline}
            />
          </group>
          <group position={[-7.003, 5.62, 9.982]}>
            <mesh
              
              
              geometry={nodes.Object_56.geometry}
              material={materials['floor.001']}
            />
            <mesh
              
              
              geometry={nodes.Object_57.geometry}
              material={materials.outline}
            />
          </group>
          <group position={[3.113, 0.007, 12.95]} rotation={[-0.908, -0.507, -0.626]} scale={2.174}>
            <mesh
              
              
              geometry={nodes.Object_59.geometry}
              material={materials['bricks.001']}
            />
            <mesh
              
              
              geometry={nodes.Object_60.geometry}
              material={materials.outline}
            />
          </group>
          <group position={[-3.588, -1.122, -1.036]} rotation={[-0.908, -0.507, -0.626]}>
            <mesh
              
              
              geometry={nodes.Object_62.geometry}
              material={materials['bricks.001']}
            />
            <mesh
              
              
              geometry={nodes.Object_63.geometry}
              material={materials.outline}
            />
          </group>
          <group position={[5.494, 0.814, -12.228]}>
            <mesh
              
              
              geometry={nodes.Object_65.geometry}
              material={materials.bricks_02}
            />
            <mesh
              
              
              geometry={nodes.Object_66.geometry}
              material={materials.outline}
            />
          </group>
          <group position={[1.059, 0.734, -4.407]} scale={1.781}>
            <mesh
              
              
              geometry={nodes.Object_68.geometry}
              material={materials['floor.002']}
            />
            <mesh
              
              
              geometry={nodes.Object_69.geometry}
              material={materials.outline}
            />
          </group>
          <group position={[1.695, 5.011, -2.843]} rotation={[0, -Math.PI / 2, 0]}>
            <mesh
              
              
              geometry={nodes.Object_83.geometry}
              material={materials.GLASS}
            />
            <mesh
              
              
              geometry={nodes.Object_84.geometry}
              material={materials['deco.001']}
            />
            <mesh
              
              
              geometry={nodes.Object_85.geometry}
              material={materials.fence}
            />
          </group>
          <group position={[2.62, 13.594, -3.205]} rotation={[0, Math.PI / 2, 0]}>
            <mesh
              
              
              geometry={nodes.Object_87.geometry}
              material={materials.bricks}
            />
            <mesh
              
              
              geometry={nodes.Object_88.geometry}
              material={materials.outline}
            />
          </group>
          <group position={[2.2, 16.913, -2.964]}>
            <mesh
              
              
              geometry={nodes.Object_90.geometry}
              material={materials.outline}
            />
            <mesh
              
              
              geometry={nodes.Object_91.geometry}
              material={materials.roof}
            />
            <mesh
              
              
              geometry={nodes.Object_92.geometry}
              material={materials.deco}
            />
            <mesh
              
              
              geometry={nodes.Object_93.geometry}
              material={materials['outline.001']}
            />
          </group>
          <group position={[8.969, 4.449, 10.703]}>
            <mesh
              
              
              geometry={nodes.Object_95.geometry}
              material={materials.bricks}
            />
            <mesh
              
              
              geometry={nodes.Object_96.geometry}
              material={materials.floor}
            />
            <mesh
              
              
              geometry={nodes.Object_97.geometry}
              material={materials.outline}
            />
          </group>
          <mesh
            
            
            geometry={nodes.Object_13.geometry}
            material={materials.Papers_noname}
            position={[6.541, 4.632, -7.534]}
            rotation={[Math.PI / 2, 0, Math.PI / 2]}
            scale={[1.749, 1, 2.838]}
          />
          <mesh
            
            
            geometry={nodes.Object_71.geometry}
            material={materials.house_1}
            position={[9.964, 9.899, 10.674]}
          />
          <mesh
            
            
            geometry={nodes.Object_73.geometry}
            material={materials.House_4}
            position={[6.454, 13.86, -5.407]}
          />
          <mesh
            
            
            geometry={nodes.Object_75.geometry}
            material={materials.house_5}
            position={[6.457, 9.415, 1.876]}
          />
          <mesh
            
            
            geometry={nodes.Object_77.geometry}
            material={materials.house_1}
            position={[3.155, 13.787, 11.908]}
          />
          <mesh
            
            
            geometry={nodes.Object_79.geometry}
            material={materials.house_2}
            position={[-3.875, 7.085, -1.593]}
          />
          <mesh
            
            
            geometry={nodes.Object_81.geometry}
            material={materials.house_3}
            position={[-2.281, 9.103, -9.677]}
          />
          <mesh
            
            
            geometry={nodes.Object_99.geometry}
            material={materials.papers_eye}
            position={[6.285, 7.002, 15.008]}
            rotation={[Math.PI / 2, 0, Math.PI / 2]}
            scale={[1.749, 1, 2.838]}
          />
          <mesh
            
            
            geometry={nodes.Object_101.geometry}
            material={materials.papers_bridge}
            position={[0.409, 5.857, 6.244]}
            rotation={[Math.PI / 2, 0, Math.PI / 2]}
            scale={[1.749, 1, 2.838]}
          />
          <mesh
            
            
            geometry={nodes.Object_103.geometry}
            material={materials.papers_ton}
            position={[2.815, 8.934, 9.403]}
            rotation={[Math.PI / 2, 0, Math.PI / 2]}
            scale={[1.749, 1, 2.838]}
          />
          <mesh
            
            
            geometry={nodes.Object_105.geometry}
            material={materials.Papers_cat}
            position={[-3.153, 5.232, 12.38]}
            rotation={[Math.PI / 2, 0, Math.PI / 2]}
            scale={[1.749, 1, 2.838]}
          />
          <mesh
            
            
            geometry={nodes.Object_107.geometry}
            material={materials.Papers_who}
            position={[4.773, 5.387, 15.002]}
            rotation={[Math.PI / 2, 0, Math.PI / 2]}
            scale={[1.749, 1, 2.838]}
          />
          <mesh
            
            
            geometry={nodes.Object_109.geometry}
            material={materials.Papers_banner}
            position={[4.006, 9.942, -5.23]}
            rotation={[Math.PI / 2, 0, Math.PI / 2]}
            scale={[1.749, 1, 2.838]}
          />
        </group>
      </group>
    </a.group>
  )
}



export default Island
